{"componentChunkName":"component---src-templates-blog-post-js","path":"/pj-reports/kintai-kun/","result":{"data":{"site":{"siteMetadata":{"title":"LettuceWork / Sho Uchida"}},"markdownRemark":{"id":"77af46e0-8116-5471-9e60-111a1949eeb3","excerpt":"どのようなプロジェクトか 技術者派遣を行っている企業向けの勤怠と労務管理を行うアプリケーションの開発 複数の給与形態、複数の雇用形態、複数の就業場所がある上に、常駐先の勤怠の締めと社内の締めが異なり、既存のパッケージのカスタマイズでは費用が非常に嵩むため、フルスクラッチでの開発を行った 202…","html":"<h2>どのようなプロジェクトか</h2>\n<p>技術者派遣を行っている企業向けの勤怠と労務管理を行うアプリケーションの開発<br>\n複数の給与形態、複数の雇用形態、複数の就業場所がある上に、常駐先の勤怠の締めと社内の締めが異なり、既存のパッケージのカスタマイズでは費用が非常に嵩むため、フルスクラッチでの開発を行った</p>\n<p>2020末に初回リリースを行い、現在はユーザーからのフィードバックを受けてシステムを改善するフェーズ(2021/05現在)</p>\n<h2>自分の役割</h2>\n<p>プロジェクト立ち上げからプロジェクトリーダーとして参加(最大メンバー8名)<br>\n要件定義、見積もり、技術選定、設計、実装、基盤構築、運用監視等、すべての工程に携わった</p>\n<h2>どのように取り組んだか</h2>\n<h3>フロントエンド</h3>\n<p>テーブル数や属性値が多い業務アプリケーションであり、静的型付け言語は必須であると考えたため、TypeScriptを採用し、特定の検索条件、特定のページをブックマークして使用する用途が想定されたため、NextJSのSSRを利用するようにした</p>\n<p>React等を用いたSPAの経験の浅いメンバーが多いため、コンポーネントごとにデータ取得をするような設計はせず、ページコンポーネントのgetServerSideProps等で同期的なデータ取得をするような設計を行った</p>\n<h3>バックエンド</h3>\n<p>認証認可部分と業務部分を大きく分け、さらに業務部分は役割ごとにサーバーを分けてマイクロサービスとして開発した<br>\nプロジェクト参画時はJavaの経験しかないメンバーが多かったため、Javaでバックエンドを書いていたが、フロントエンド開発を通じてTypeScriptに慣れたメンバーが大半になってからはバックエンドはNodeJS + Expressを用い、フロントエンドとバックエンドの開発言語を統一した</p>\n<h3>基盤周り</h3>\n<p>最初はAWSのECSとELBを用いた構成で本番環境を構築していたが、途中でコスト削減の依頼があったため、VPSにDocker Composeを入れて、そこで複数のコンテナを動かすように変更した<br>\nVPSにSSHでログインし、アプリケーションを転送し、コマンドで起動するといった原始的な手段は煩わしかったため、Jenkinsを用いて自動でデプロイできるようにした</p>\n<h2>開発時に工夫したこと</h2>\n<h3>段階的に言語を習得</h3>\n<p>JavaやjQueryのみの経験しかないメンバーや、新人プログラマー比率が高かったため、プロジェクト内で段階的に新しい技術に触れられるような工夫をした</p>\n<p>具体的には</p>\n<ol>\n<li>Spring Boot + Javaで単純なバックエンドAPIを書く</li>\n<li>NextJS + TypeScriptで同期的なデータ取得をするような単純な画面を書く</li>\n<li>Express + TypeScriptでローコードなバックエンドAPIを書けるようになる</li>\n</ol>\n<p>これによってフロントエンドとバックエンドの開発言語を統一することが可能になり、後続プロジェクトでは工数を削減することができた</p>\n<h3>本番オペレーションの自動化</h3>\n<p>デプロイはシェルスクリプトやJenkins等を用いて自動化することによってヒューマンエラーを減らすようにした<br>\nテストや死活監視の結果は適宜Slackのプロジェクトちゃんねるに通知するようにし、ダウンタイムが最小限になるようにした</p>\n<h3>自主性を重んじる</h3>\n<p>プロジェクト開始直後は細かく指示を出したりマージ前コードレビューをしていたが、自分の意見が通り過ぎるチームになってしまっていることを実感したため、メンバー全員が業務知識と採用技術に関してある程度の理解が深まった段階で、レビューを事後に行うようにした<br>\n結果、各々が顧客意見を自分で取り込みリリースするサイクルが生まれた</p>\n<h2>困難だったこと</h2>\n<h3>NextJSの記事が非常に少ない</h3>\n<p>検索エンジンで得られる情報量がが非常に少なく、情報を得るのに非常に苦労した<br>\n特に日本語記事は絶望的で、Nuxt(Vue)の記事がヒットしてしまうことが多かった<br>\n英語の公式ドキュメントを見るという文化のあるメンバーが少なかったため、ペアプロ時には自分が率先して公式ドキュメントから必要な情報を探し当てる姿を見せることで、その文化を社内に浸透させた</p>\n<h3>とにかく質問をされる</h3>\n<p>経験の浅いメンバーを多く抱えていたため、質問されることが多く、自分の時間を確保するのが困難で、自分自身の作業が遅延することが多々発生した<br>\nこのプロジェクトではメンバーが技術に慣れるまではその問題が解消されることはなかった</p>\n<p>後続プロジェクトでは経験の浅いメンバーのサポートを手厚く行えるようなスケジュールを引くようにした</p>\n<h2>何を学んだか</h2>\n<p>新しい技術を採用したことによる困難にぶつかりながらプロジェクトを完遂するという体験から、学習コストとその後の運用コストに対する意識が非常に高まった<br>\n顧客の職務規定や給与規定、業務フローの変更を伴うシステム化であり、関連法規を読み込むという経験から、法令対応のシステムを作ることに対する苦手意識がなくなった</p>","frontmatter":{"title":"プロジェクトレポート(労務管理/賃金計算システム)","date":"2021/05/16","description":"経歴書に記載のある、労務管理/賃金計算システムのレポートです。"}}},"pageContext":{"slug":"/pj-reports/kintai-kun/","previous":{"fields":{"slug":"/pj-reports/minimum/"},"frontmatter":{"title":"プロジェクトレポート(その他小規模案件)"}},"next":{"fields":{"slug":"/recruit-qa/requirement/"},"frontmatter":{"title":"よくある質問(条件面)"}}}},"staticQueryHashes":["984448874"]}