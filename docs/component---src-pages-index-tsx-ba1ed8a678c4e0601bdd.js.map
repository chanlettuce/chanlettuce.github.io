{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["Bio","data","useStaticQuery","author","site","siteMetadata","social","avatar","childImageSharp","fixed","className","alt","name","imgStyle","borderRadius","summary","href","twitter","BlogIndex","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"2FAAA,0DAkEeA,IAvDH,WAAM,gBACVC,EAAOC,yBAAc,aAwBrBC,EAAM,UAAGF,EAAKG,YAAR,iBAAG,EAAWC,oBAAd,aAAG,EAAyBF,OAClCG,EAAM,UAAGL,EAAKG,YAAR,iBAAG,EAAWC,oBAAd,aAAG,EAAyBC,OAElCC,EAASN,SAAH,UAAGA,EAAMM,cAAT,iBAAG,EAAcC,uBAAjB,aAAG,EAA+BC,MAE9C,OACE,yBAAKC,UAAU,OACZH,GACC,kBAAC,IAAD,CACEE,MAAOF,EACPI,KAAKR,aAAA,EAAAA,EAAQS,OAAR,GACLF,UAAU,aACVG,SAAU,CACRC,aAAc,UAInBX,aAAA,EAAAA,EAAQS,OACP,yCACa,gCAAST,EAAOS,MAD7B,KAC6CT,aAAA,EAAAA,EAAQY,UAAW,KADhE,IAGE,uBAAGC,KAAI,yBAAyBV,aAAA,EAAAA,EAAQW,UAAR,KAAhC,yC,kCCzDV,0HAkEeC,UA1DmD,SAAC,GAAuB,QAArBjB,EAAqB,EAArBA,KAAMkB,EAAe,EAAfA,SACnEC,GAAY,UAAAnB,EAAKG,YAAL,mBAAWC,oBAAX,eAAyBgB,QAAzB,QACZC,EAAQrB,EAAKsB,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,kBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACA,yLAUJ,kBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GAGjC,wBAAIM,MAAO,CAAEC,UAAW,SACrBL,EAAMM,KAAI,SAAAC,GAAQ,QACXR,GAAQ,UAAAQ,EAAKC,mBAAL,eAAkBT,SAAlB,UAA2BQ,EAAKE,cAAhC,aAA2B,EAAaC,MAEtD,OACE,wBAAIC,IAAKJ,EAAKE,OAAQC,MACpB,6BACEtB,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,gCACE,4BACE,kBAAC,OAAD,CAAMC,GAAIP,EAAKE,OAAQC,KAAOK,SAAS,OACrC,0BAAMA,SAAS,YAAYhB,KAG/B,+BAAQQ,EAAKC,YAAaQ,OAE5B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAaW,aAAeZ,EAAKa,SAEhDL,SAAS,yBActB,IAAMM,EAAY","file":"component---src-pages-index-tsx-ba1ed8a678c4e0601bdd.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery<GatsbyTypes.BioQueryQuery>(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50, quality: 95) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site?.siteMetadata?.author\n  const social = data.site?.siteMetadata?.social\n\n  const avatar = data?.avatar?.childImageSharp?.fixed\n\n  return (\n    <div className=\"bio\">\n      {avatar && (\n        <Image\n          fixed={avatar}\n          alt={author?.name || ``}\n          className=\"bio-avatar\"\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogIndex:React.FC<PageProps<GatsbyTypes.BlogIndexQuery>> = ({ data, location }) => {\n  const siteTitle = data.site?.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {/* <SEO title=\"All posts\" />\n      <Bio /> */}\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter?.title || post.fields?.slug\n\n          return (\n            <li key={post.fields!.slug!}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields!.slug!} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter!.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter!.description || post.excerpt!,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogIndex {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY/MM/DD\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}